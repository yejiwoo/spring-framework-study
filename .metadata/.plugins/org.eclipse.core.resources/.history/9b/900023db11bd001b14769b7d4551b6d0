<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- Connection Pool 관련 Bean 구성: HikariCP -->
<!-- 스텝1: JDBC 정보 구성(이 방법이 2가지) -->
<!-- [방법1] JDBC 정보를 직접 지정하는 구성 -->
<!--
 	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	 <property name="driverClassName" value="oracle.jdbc.OracleDriver"></property>
	 <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
	 <property name="username" value="book_ex"></property>
	 <property name="password" value="book_ex"></property>
	 </bean>
 -->

<!-- [방법2] JDBC 정보를 jdbc.properties 파일에서 읽어 들이는 구성(2-Step) -->
<!-- 2-1. jdbc.properties 파일에서 읽어 들이는 PropertyPlaceholderConfigurer 클래스 빈 설정(스프링 5에서 Deprecated) -->
<!-- <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	 <property name="locations">
	 	<value>/WEB-INF/config/jdbc.properties</value>
	 </property>
 </bean> -->
<!-- 위의 빈 사용을 대체방법(Spring 5 이후) -->
 <!-- <context:property-placeholder location="/WEB-INF/jdbcConfig/jdbc.properties"/> -->
<context:property-placeholder location="classpath:jdbcConfig/jdbc.properties"/>
<!-- 2-2. HikariConfig 빈을 통해 데이터베이스 구성 정보를 읽어 들임 -->
 <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	 <property name="driverClassName" value="${jdbcHikari.driverClassName}"></property>
	 <property name="jdbcUrl" value="${jdbcHikari.jdbcUrl}"></property>
	 <property name="username" value="${jdbcHikari.username}"></property>
	 <property name="password" value="${jdbcHikari.password}"></property>
 </bean>
<!-- 스텝2: HikariDataSource 클래스를 이용한 dataSource 빈 생성 -->
<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
 destroy-method="close">
 	<constructor-arg ref="hikariConfig" />
 </bean>
<!-- Connection Pool 관련 Bean 구성: MybatisCP -->
<!-- [방법1] JDBC 정보를 직접 설정하여 dataSource 빈 구성 -->
<!--
 <bean id="dataSource"
 class="org.apache.ibatis.datasource.pooled.PooledDataSource">
	 <property name="driver" value="oracle.jdbc.driver.OracleDriver" />
	 <property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl" />
	 <property name="username" value="book_ex" />
	 <property name="password" value="book_ex" />
 </bean>
 --> 
<!-- [방법2] JDBC 정보를 jdbc.properties 파일에서 읽어 들여 dataSource 빈 구성 -->
<!-- 2-1. jdbc.properties 파일에서 읽어 들이는 PropertyPlaceholderConfigurer 클래스 빈 설정 -->

<!-- <context:property-placeholder location="/WEB-INF/jdbcConfig/jdbc.properties"/> -->
<!-- <context:property-placeholder location="classpath:jdbcConfig/jdbc.properties"/> -->

<!-- 2-2. PropertyPlaceholderConfigurer 클래스 빈을 통해 읽어 들인 JDBC 정보로 dataSource 빈 구성 -->
<!--
 <bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
	 <property name="driver" value="${jdbcIbatis.driverClassName}" />
	 <property name="url" value="${jdbcIbatis.url}" />
	 <property name="username" value="${jdbcIbatis.username}" />
	 <property name="password" value="${jdbcIbatis.password}" />
 </bean>
 --> 

</beans>
